#+TITLE: Back end for Talents What Project 
#+AUTHOR: Sripathi Kammari, Madhavi Puliraju
#+DATE: [2016-03-12 Sat]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-0.org
#+options: ^:nil

* Introduction
  This document captures the DB layer and REST APIs of the Talents What Project, along with their test cases. 

* Requirements
  This release (v1.0), fulfills the following requirements:

  1. Python API that acts as a wrapper to make CRUD operations on the
     entities - Roles, Users, Colleges, Groups.

  2. REST API for various applications to perform CRUD operations on the
     entities - Roles, Users, Colleges, Groups.
  
* Design and Implementation
** Some initialization and boilerplate code
*** __init__
#+BEGIN_SRC python :tangle src/__init__.py :eval no
print "src package"
import db
import app
import config
#+END_SRC
*** __init__ for Tests
#+BEGIN_SRC python :tangle tests/__init__.py :eval no
#something
print "test package"
#+END_SRC

*** Imports for Python API
#+BEGIN_SRC python :tangle src/db.py :eval no
# -*- coding: utf-8 -*-

from collections import OrderedDict

from flask.ext.sqlalchemy import SQLAlchemy
from flask import current_app, request
from sqlalchemy.orm import relationship
import sqlalchemy.types as types

import os
import re
from urlparse import urlparse
from datetime import datetime
import json

from op_exceptions import AttributeRequired
from utils import typecheck
from werkzeug.security import generate_password_hash, \
     check_password_hash
from flask import Flask
from flask_mail import Mail, Message


db = SQLAlchemy()
mail = Mail()

# Abstract class to hold common methods
class Entity(db.Model):

    __abstract__ = True

    # save a db.Model to the database. commit it.
    def save(self):
        db.session.add(self)
        db.session.commit()

    # update the object, and commit to the database
    def update(self, **kwargs):
        for attr, val in kwargs.iteritems():
            setter_method = "set_" + attr
            try:
                self.__getattribute__(setter_method)(val)
            except Exception as e:
                raise e

        self.save()

    #print "Setting new val"
    #print "Calling %s on %s" % (method_to_set, curr_entity)
    #try:
    #    getattr(record, method_to_set)(new_val)
    #except Exception as e:
    #pass

    def delete(self):
        db.session.delete(self)
        db.session.commit()

#+END_SRC

*** Imports for REST API
   The Python code to have the imports, boilerplate code etc. for the
   APIs.  We are using Flask blueprints to make the API, and then we
   can plug this blueprint in our main application. [[http://flask.pocoo.org/docs/0.10/blueprints/][More on Flask
   blueprints]].
#+BEGIN_SRC python :tangle src/api.py :eval no :noweb yes
# -*- coding: utf-8 -*-

import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort,\
    current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from db import *
from utils import parse_request, jsonify_list
from maps import *
api = Blueprint('APIs', __name__)
#+END_SRC
*** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle tests/test_db.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

*** Imports and Initialization of testcases for REST API
#+BEGIN_SRC python :tangle tests/test_api.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

** The Data Model
*** ER Diagram
    [[./diagrams/model-diagram.jpg][schema diagram]] 
*** Name
     
    Name is an alphabetical string.

#+BEGIN_SRC python :tangle src/db.py :eval no
class Name(object):
    def __init__(self, value):
        # if the string contains any non-alphabet and non-space character, raise
        # a type error
        if re.search('[^a-zA-Z. ]+', value):
            raise TypeError('%s is not a Name!' % value)

        self.value = value

#+END_SRC
    
*** Email

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].  Following
     is the constructor for this class.

#+BEGIN_SRC python :tangle src/db.py :eval no
class Email(object):
    def __init__(self, value):
        if not re.search('[^@]+@[^@]+\.[^@]+', value):
            raise TypeError('%s is not an email!' % value)
        self.value = value
        
#+END_SRC
     
*** Tests for Custom Types
#+BEGIN_SRC python :tangle tests/test_db.py :eval no

class TestCustomTypes(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    # Test the Name type
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")

    # Test the Email type
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("smith@gmail.com")
        # correct name
        self.assertEqual(new_email.value, "smith@gmail.com")
        # incorrect name
        self.assertRaises(TypeError, Email, "@@@@smithgmail.com")
        
#+END_SRC

*** Role
**** Immutable data
     + Id

**** Mutable data
     + Role Name

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class Role(Entity):

    __tablename__ = 'roles'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)

    users = db.relationship('User', backref='role')
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    role = Role(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

#+END_SRC
**** Tests for Role Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_role_constructor(self):
        print "test_role_constructor"
        name = Name("Admin")
        role = Role(name=name)
        self.assertEqual(isinstance(role, Role), True)

        # Calling the institute constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Role)

        # Calling the role constructor with necessary arguments
        # (name) but with wrong type should raise TypeError
        self.assertRaises(TypeError, Role,
                          ,**{'name': "Admin"
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getRole: Id --> Role
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return Role.query.get(id)

#+END_SRC
***** Test getRole: Id --> Role
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_role_by_id(self):
        print "test_get_role_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

#+END_SRC
***** getAll: Nil --> set[Role]
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_all():
        return Role.query.all()
#+END_SRC
***** Test getAll: Nil --> set[Role]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual("Admin", role.name)
#+END_SRC
***** getName: Role --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC
***** Test getName: Role --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_role_name(self):
        print "test_get_role_name"
        role = Role(name=Name("Admin"))
        role_name = role.get_name()
        self.assertEqual(role_name, "Admin")
#+END_SRC

***** setName: Role, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test setName: Role, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_role_name(self):
        print "test_set_role_name"
        role = Role(name=Name("Admin"))
        new_name = Name("OC")
        role.set_name(new_name)
        self.assertEqual(role.name, "OC")
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name
        }

#+END_SRC

***** Test Role to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_role_to_client(self):
        print "test_role_to_client"
        role = Role(name=Name("Admin"))
        role.save()
        role = Role.get_by_id(1)
        role_dict = role.to_client()
        self.assertEqual("Admin", role_dict['name'])
#+END_SRC
*** User
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Email
     + Password
     + Role --> Id
     + Mobile Number
     + Date of Birth
     + Address
     + City
     + Country
     + Zip Code
**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class User(Entity):

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), unique=True)
    password = db.Column(db.String(128), unique=True)
    mobile_number = db.Column(db.BigInteger)
    date_of_birth = db.Column(db.String(128))
    address = db.Column(db.String(255))
    city = db.Column(db.String(128))
    country = db.Column(db.String(128))
    zip_code = db.Column(db.Integer)

    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))

    colleges = db.relationship('College', backref='user')
    user_reports = db.relationship('UserReport', backref='user')
 #+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    User = User(name=<instance of class Name>,
                email=<instance of class Email>,
                password=str,
                role=<instance of class Role>
                [,mobile_number=int]
                [,date_of_birth=str]
                [,address=str]                
                [,city=str]
                [,country=str]
                [,zip_code=int])
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'email' not in kwargs:
            raise AttributeRequired("mandatory attribute `email` is missing")
        self.set_email(kwargs['email'])

        if 'password' not in kwargs:
            raise AttributeRequired("mandatory attribute `password` is missing")
        self.set_password(kwargs['password'])

        if 'role' not in kwargs:
            raise AttributeRequired("mandatory attribute `role` is missing")
        self.set_role(kwargs['role'])

        if 'mobile_number' in kwargs:
            self.set_mobile_number(kwargs['mobile_number'])

        if 'date_of_birth' in kwargs:
            self.set_date_of_birth(kwargs['date_of_birth'])

        if 'address' in kwargs:
            self.set_address(kwargs['address'])

        if 'city' in kwargs:
            self.set_city(kwargs['city'])
        
        if 'country' in kwargs:
            self.set_country(kwargs['country'])
        
        if 'zip_code' in kwargs:
            self.set_zip_code(kwargs['zip_code'])

        
        
    def __str__(self):
        return "Name = %s, e-mail id = %s,\ password = %s,\
        mobile_number = %s, role=%s, date_of_birth = %s,\
        address = %s, city = %s, country = %s, zip_code = %s"\
        % (self.name, self.email, self.password,
           self.mobile_number, self.role.name,
           self.date_of_birth, self.address, self.city,
           self.country, self.zip_code)

    def __repr__(self):
        return "Name = %s, e-mail id = %s,\ password = %s,\
        mobile_number = %s, role=%s, date_of_birth = %s,\
        address = %s, city = %s, country = %s, zip_code = %s"\
        % (self.name, self.email, self.password,
           self.mobile_number, self.role.name,
           self.date_of_birth, self.address, self.city,
           self.country, self.zip_code)

#+END_SRC
     
**** Tests for User Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_user_constructor(self):
        print "test_user_constructor"
        name = Name("Admin")
        role = Role(name=name)
        role.save()
        
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)
        user.save()
          
        self.assertEqual("madhavi", user.name)
        self.assertEqual("madhavi@vlabs.ac.in", user.email)
        
        # Calling the user constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, User)
        
        # Calling the user constructor with necessary arguments
        # (name, email and role) but with wrong type should raise TypeError
        self.assertRaises(TypeError, User,
                          ,**{'name': "Admin",
                             'email': "ambika@vlabs.ac.in",
                             'role': role
                         })
        
#+END_SRC
**** Functions that operate on the Role domain
***** getAll: Nil --> set[User]
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_all():
        return User.query.all()

#+END_SRC
***** Test getAll: Nil --> set[User]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_user_get_all(self):
      print "test_user_get_all"
      role = Role(name=Name("Admin"))

      user1 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                   password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                   address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user1.save()
      
      user2 = User(name=Name("sripathi"), email=Email("sripathi@vlabs.ac.in"),
                   password=("madhavi"), mobile_number=("9898989898"), date_of_birth=("07/04/1993"),
                   address=("flat number-102"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role2)
      
      user2.save()


      user_list = User.get_all()

      self.assertEqual("madhavi@vlabs.ac.in", user_list[0].email)
      self.assertEqual("madhavi", user_list[0].name)
      self.assertEqual("Admin", user_list[0].role.name)
      self.assertEqual("sripathi@vlabs.ac.in", user_list[1].email)
      self.assertEqual("sripathi", user_list[1].name)
      self.assertEqual("Executive", user_list[1].role.name)
#+END_SRC
***** getUser: Id --> User
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return User.query.get(id)

#+END_SRC
***** Test getUser: Id --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_by_id(self):
      print "test_get_user_by_id"
      role = Role(name=Name("Admin"))
      role.save()
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                   password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                   address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()

      self.assertEqual(user.get_by_id(1).name, "madhavi")
#+END_SRC

***** getName: User --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test getName: User --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_name(self):
      print "test_get_user_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()

      user_name = user.get_name()
      self.assertEqual(user_name, "ambika")
#+END_SRC

***** getEmail: User --> Email
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_email(self):
        return self.email
#+END_SRC

***** Test getEmail: User --> Email
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_email(self):
      print "test_get_user_email"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)
      user.save()

      user_email = user.get_email()
      self.assertEqual(user_email, "madhavi@vlabs.ac.in")
#+END_SRC

***** getpassword: User --> Password
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_password(self):
        return self.password
#+END_SRC

***** Test getPassword: User --> Password
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_password(self):
      print "test_get_user_email"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user_password = user.get_password()
      self.assertEqual(user_password, user.check_password("madhavi"))
#+END_SRC

***** getMobileNumber: User --> MobileNumber
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_mobile_number(self):
        return self.mobile_number
#+END_SRC
      
***** Test getMobileNumber: User --> MobileNumber
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_mobile_number(self):
      print "test_get_user_inst_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      self.assertEqual(user.mobile_number, "9866188505")
#+END_SRC

***** getRole: User --> Role
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_role(self):
        return self.role

#+END_SRC

***** Test getRole: User --> Role
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_role(self):
      print "test_get_user_role"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user_role = user.get_role()
      self.assertEqual(user_role, role)
#+END_SRC

***** getDateOfBirth: User --> DateofBirth
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_date_of_birth(self):
        return self.date_of_birth
#+END_SRC

***** Test testDateOfBirth: User --> Datetime
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_dob(self):
      print "test_get_user_dob"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      self.assertEqual(user.date_of_birth, "06/02/1991")
#+END_SRC

***** getAddress: User --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_address(self):
        return self.address
#+END_SRC
      
***** Test getAddress: User --> String 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_address(self):
      print "test_get_user_address"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      self.assertEqual(user.address, "1-3-176/D")
#+END_SRC

***** getCity: User --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_city(self):
        return self.city
#+END_SRC
      
***** Test getCity: User --> String 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_city(self):
      print "test_get_user_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user_name = user.get_name()
      self.assertEqual(user_name, "ambika")
#+END_SRC

***** getCountry: User --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_country(self):
        return self.country
#+END_SRC

***** Test getCountry: User --> String 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_country(self):
      print "test_get_user_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)
      
      user_name = user.get_name()
      self.assertEqual(user_name, "ambika")
#+END_SRC

***** getZipcode: User --> Integer
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_zip_code(self):
        return self.zip_code
#+END_SRC

***** Test getZipcode: User --> Integer 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_get_user_name(self):
      print "test_get_user_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)
    
      user_name = user.get_name()
      self.assertEqual(user_name, "ambika")
#+END_SRC

***** setName: User, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC

***** Test setName: User, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_user_name(self):
      print "test_set_user_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_name(Name("Madhavi"))
      user.save()
      user = User.get_by_id(1)
      self.assertEqual("Madhavi", user.name)
#+END_SRC

***** setEmail: User, Email --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(email=Email)
    def set_email(self, email):
        self.email = email.value
#+END_SRC

***** Test setEmail: User, Email --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_user_email(self):
      print "test_set_user_email"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_email(Email("madhavi@vlabs.ac.in"))
      user.save()
      user = User.get_by_id(1)
      self.assertEqual("madhavi@vlabs.ac.in", user.email)
#+END_SRC

***** setPassword: User, Password --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_password(self, password):
        self.password = generate_password_hash(password)
#+END_SRC

***** Test setPassword: User, Email --> Void
***** setMobileNumber: User, Mobile Number --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_mobile_number(self, mobile_number):
        self.mobile_number = mobile_number
#+END_SRC

***** Test setMobileNumber: User, Mobile Number --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_user_institute_name(self):
      print "test_set_user_institute_name"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_institute_name("IIIT-H")
      user.save()
      self.assertEqual("IIIT-H", user.institute_name)
#+END_SRC

***** setDateOfBirth: User, DateOfBirth --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_date_of_birth(self, date_of_birth):
        self.date_of_birth = date_of_birth
#+END_SRC

***** Test setDateOfBirth: User, DateOfBirth --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_date_of_birth(self):
      print "test_set_user_last_active"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_last_active("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
      user.save()
      self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** set Address: User, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_address(self, address):
        self.address = address
#+END_SRC

***** Test set Address: User, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_address(self):
      print "test_set_user_last_active"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_toc("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
      user.save()
      self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** set City: User, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_city(self, city):
        self.city = city
#+END_SRC

***** Test set City: User, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_city(self):
      print "test_set_user_last_active"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_toc("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
      user.save()
      self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** set Country: User, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_country(self, country):
        self.country = country
#+END_SRC

***** Test set Country: User, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_country(self):
      print "test_set_user_last_active"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_toc("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
      user.save()
      self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** set Zipcode: User, Integer --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_zip_code(self, zip_code):
        self.zip_code = zip_code
#+END_SRC

***** Test Zipcode: User, Integer --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_zip_code(self):
      print "test_set_user_last_active"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user.set_toc("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
      user.save()
      self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** setRole: User, Role --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(role=Role)
    def set_role(self, role):
        self.role = role

#+END_SRC

***** Test setRole: User, Role --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_set_user_role(self):
      print "test_set_user_role"
      role1 = Role(name=Name("Admin"))
      role2 = Role(name=Name("OC"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()     
      user.set_role(role2)
      user.save()
      user = User.get_by_id(1)
      self.assertEqual(user.role, role2)
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'email': self.email,
            'name': self.name,
            'role': self.role.to_client(),
            'mobile_number': self.mobile_number,
            'date_of_birth': self.date_of_birth,
            'address': self.address,
            'city': self.city,            
            'country': self.country,
            'zip_code': self.zip_code
        }
#+END_SRC
      
***** Test User to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
  def test_user_to_client(self):
      print "test_user_to_client"
      role = Role(name=Name("Admin"))
      user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                  password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                  address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role1)

      user.save()
      user = User.get_by_id(1)
      user_dict = user.to_client()
      self.assertEqual("madhavi@vlabs.ac.in", user_dict['email'])
      self.assertEqual("madhavi", user_dict['name'])
      self.assertEqual("Admin", user_dict['role']['name'])
#+END_SRC

*** College
**** Immutable data
     + Id
     + Address
     + Created by Id

**** Mutable data
     + College Name

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class College(Entity):

    __tablename__ = 'colleges'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    address = db.Column(db.String(128))

    created_by_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    created_by = relationship('User', foreign_keys=[created_by_id])
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    college = College(name=<instance of class Name>,
                address=str,
                created_by=<instance of class User>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])
        if 'address' in kwargs:
            self.set_address(kwargs['address'])
        if 'created_by' not in kwargs:
            raise AttributeRequired("mandatory attribute `created_by` is missing")
        self.set_created_by(kwargs['created_by'])

#+END_SRC
**** Tests for Group Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestCollege(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_college_constructor(self):
        print "test_college_constructor"
        name = Name("Admin")
        role = Role(name=name)
        self.assertEqual(isinstance(role, Role), True)

        # Calling the institute constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Role)

        # Calling the role constructor with necessary arguments
        # (name) but with wrong type should raise TypeError
        self.assertRaises(TypeError, Role,
                          ,**{'name': "Admin"
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getCollege: Id --> College
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return College.query.get(id)

#+END_SRC
***** Test getCollege: Id --> College
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_college_by_id(self):
        print "test_get_college_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

#+END_SRC
***** getAll: Nil --> set[College]
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_all():
        return College.query.all()
#+END_SRC
***** Test getAll: Nil --> set[College]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_group_get_all(self):
        print "test_group_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual("Admin", role.name)
#+END_SRC
***** getName: College --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC
***** Test getName: College --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_college_name(self):
        print "test_get_group_name"
        role = Role(name=Name("Admin"))
        role_name = role.get_name()
        self.assertEqual(role_name, "Admin")
#+END_SRC

***** getAddress: str --> College
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_address(self):
        return self.address

#+END_SRC

***** Test getAddress: str --> College
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_college(self):
        print "test_get_user_role"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_role = user.get_role()
        self.assertEqual(user_role, role)
#+END_SRC

***** getCreatedBy: User --> CreatedBy
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_created_by(self):
        return self.created_by

#+END_SRC

***** Test getCreatedBy: User --> CreatedBy
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_created_by(self):
        print "test_get_user_role"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_role = user.get_role()
        self.assertEqual(user_role, role)
#+END_SRC

***** setName: Group, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test setName: Group, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_college_name(self):
        print "test_set_role_name"
        role = Role(name=Name("Admin"))
        new_name = Name("OC")
        role.set_name(new_name)
        self.assertEqual(role.name, "OC")
#+END_SRC

***** setAddress: str, Address --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    def set_address(self, address):
        self.address = address

#+END_SRC

***** Test setAddress: str, Address --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_group_college(self):
        print "test_set_user_role"
        role1 = Role(name=Name("Admin"))
        role2 = Role(name=Name("OC"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role1)
        user.save()     
        user.set_role(role2)
        user.save()
        user = User.get_by_id(1)
        self.assertEqual(user.role, role2)
#+END_SRC

***** setCreatedBy: User, CreatedBy --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(created_by=User)
    def set_created_by(self, created_by):
        self.created_by = created_by

#+END_SRC

***** Test setCreatedBy: User, CreatedBy --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_role(self):
        print "test_set_user_role"
        role1 = Role(name=Name("Admin"))
        role2 = Role(name=Name("OC"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role1)
        user.save()     
        user.set_role(role2)
        user.save()
        user = User.get_by_id(1)
        self.assertEqual(user.role, role2)
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'address': self.address,
            'created_by': self.created_by.to_client()
        }

#+END_SRC

***** Test Group to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_group_to_client(self):
        print "test_role_to_client"
        role = Role(name=Name("Admin"))
        role.save()
        role = Role.get_by_id(1)
        role_dict = role.to_client()
        self.assertEqual("Admin", role_dict['name'])
#+END_SRC

*** Group
**** Immutable data
     + Id
     + College Id
     + Created by Id

**** Mutable data
     + Group Name

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class Group(Entity):

    __tablename__ = 'groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)

    college_id = db.Column(db.Integer, db.ForeignKey('colleges.id'))        
    college = relationship('College', foreign_keys=[college_id])
    created_by_id = db.Column(db.Integer, db.ForeignKey('users.id'))        
    created_by = relationship('User', foreign_keys=[created_by_id])
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    group = Group(name=<instance of class Name>,
                college=<instance of class College>,
                created_by=<instance of class User>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])
        if 'college' not in kwargs:
            raise AttributeRequired("mandatory attribute `college` is missing")
        self.set_college(kwargs['college'])
        if 'created_by' not in kwargs:
            raise AttributeRequired("mandatory attribute `created_by` is missing")
        self.set_created_by(kwargs['created_by'])

#+END_SRC
**** Tests for Group Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestGroup(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_group_constructor(self):
        print "test_role_constructor"
        name = Name("Admin")
        role = Role(name=name)
        self.assertEqual(isinstance(role, Role), True)

        # Calling the institute constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Role)

        # Calling the role constructor with necessary arguments
        # (name) but with wrong type should raise TypeError
        self.assertRaises(TypeError, Role,
                          ,**{'name': "Admin"
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getGroup: Id --> Group
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return Group.query.get(id)

#+END_SRC
***** Test getGroup: Id --> Group
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_by_id(self):
        print "test_get_group_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

#+END_SRC
***** getAll: Nil --> set[Group]
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_all():
        return Group.query.all()
#+END_SRC
***** Test getAll: Nil --> set[Group]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_group_get_all(self):
        print "test_group_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual("Admin", role.name)
#+END_SRC
***** getName: Group --> Name
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC
***** Test getName: Group --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_name(self):
        print "test_get_group_name"
        role = Role(name=Name("Admin"))
        role_name = role.get_name()
        self.assertEqual(role_name, "Admin")
#+END_SRC

***** getCollege: User --> College
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_college(self):
        return self.college

#+END_SRC

***** Test getCollege: User --> College
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_college(self):
        print "test_get_user_role"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_role = user.get_role()
        self.assertEqual(user_role, role)
#+END_SRC

***** getCreatedBy: User --> CreatedBy
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_created_by(self):
        return self.created_by

#+END_SRC

***** Test getCreatedBy: User --> CreatedBy
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_group_created_by(self):
        print "test_get_user_role"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_role = user.get_role()
        self.assertEqual(user_role, role)
#+END_SRC

***** setName: Group, Name --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test setName: Group, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_group_name(self):
        print "test_set_role_name"
        role = Role(name=Name("Admin"))
        new_name = Name("OC")
        role.set_name(new_name)
        self.assertEqual(role.name, "OC")
#+END_SRC

***** setCollege: User, College --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(college=College)
    def set_college(self, college):
        self.college = college

#+END_SRC

***** Test setCollege: User, College --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_group_college(self):
        print "test_set_user_role"
        role1 = Role(name=Name("Admin"))
        role2 = Role(name=Name("OC"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role1)
        user.save()     
        user.set_role(role2)
        user.save()
        user = User.get_by_id(1)
        self.assertEqual(user.role, role2)
#+END_SRC

***** setCreatedBy: User, CreatedBy --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(created_by=User)
    def set_created_by(self, created_by):
        self.created_by = created_by

#+END_SRC

***** Test setCreatedBy: User, CreatedBy --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_role(self):
        print "test_set_user_role"
        role1 = Role(name=Name("Admin"))
        role2 = Role(name=Name("OC"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role1)
        user.save()     
        user.set_role(role2)
        user.save()
        user = User.get_by_id(1)
        self.assertEqual(user.role, role2)
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'college': self.college.to_client(),
            'created_by': self.created_by.to_client()
        }

#+END_SRC

***** Test Group to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_group_to_client(self):
        print "test_role_to_client"
        role = Role(name=Name("Admin"))
        role.save()
        role = Role.get_by_id(1)
        role_dict = role.to_client()
        self.assertEqual("Admin", role_dict['name'])
#+END_SRC
*** User Reports
**** Immutable data
     + Id
  
**** Mutable data
     + Path
     + User Id

**** Definition
#+BEGIN_SRC python :tangle src/db.py :eval no
class UserReport(Entity):

    __tablename__ = 'user_reports'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    path = db.Column(db.String(128))
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))

#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE 
    user_report = UserReport(name=str, path=str,  user=<instance of class User>)
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle src/db.py :eval no 
    def __init__(self, **kwargs):

        if 'user' not in kwargs:
            raise AttributeRequired("mandatory attribute `user` is missing")
        self.set_user(kwargs['user'])
        
        if 'path' in kwargs:
            self.set_path(kwargs['path'])

        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

    def __str__(self):
        return "user = %s, name = %s, path = %s" % \
            (self.user, self.name, self.path)

    def __repr__(self):
        return "user = %s, name=%s, path = %s" % \
            (self.user, self.name, self.path)

#+END_SRC

**** Tests for User Report Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
class TestUserReport(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_user_report_constructor(self):
        print "test_user_report_constructor"

        role = Role(name=Name("Student"))
        role.save()
           
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        user_report = UserReport(name="Student Photo", user=user)
        user_report.save()
        
        # Calling the user_report constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, UserReport)

        # Calling the user_report constructor with necessary arguments
        # (user,path) but with wrong type should raise TypeError
        self.assertRaises(TypeError, UserReport,
                          ,**{'path': 12,
                              'name':"College Report",
                              'user': user
                            })

#+END_SRC
**** Functions that operate on the User Report domain
***** getAll: Nil --> set[UserReport]
#+BEGIN_SRC python :tangle src/db.py :eval no
    @staticmethod
    def get_all():
        return UserReport.query.all()

#+END_SRC

***** Test getAll: Nil --> set[UserReport]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_user_reports_get_all(self):
        print "test_user_reports_get_all"

        name = Name("Student")
        role = Role(name=name)
        role.save()

        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()
         
        
        student_report1 = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf",
                             user=user)
        user_report1.save()

        user_report2 = UserReport(name="User Photos", path="/static/uploads/college-reports/photos.png",
                             user=user)
        user_report2.save()

        user_report_list = UserReport.get_all()
        
        self.assertEqual("College Report", user_report_list[0].name)
        self.assertEqual("User Photos", user_report_list[1].name)

        self.assertEqual("/static/uploads/college-reports/file.pdf", user_report_list[0].path)
        self.assertEqual("/static/uploads/college-reports/photos.png", user_report_list[1].path)

#+END_SRC

***** getUserReport: Id --> UserReport
#+BEGIN_SRC python :tangle src/db.py :eval no 
    @staticmethod
    def get_by_id(id):
        return UserReport.query.get(id)

#+END_SRC

***** Test getUserReport: Id --> UserReport
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_user_report_by_id(self):
        print "test_get_document_by_id"

        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()
        
        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        self.assertEqual(user_report.get_by_id(1).path, "/static/uploads/college-reports/file.pdf" )
        self.assertEqual(user_report.get_by_id(1).name, "College Report" )

#+END_SRC
     
***** getPath: UserReport --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_path(self):
        return self.path
#+END_SRC

***** Test getPath: UserReport --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_report_path(self):
        print "test_get_user_report_path"
        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        user_report_path = user_report.get_path()
        self.assertEqual(user_report_path, "/static/uploads/college-reports/file.pdf")

#+END_SRC
     
***** getName: UserReport --> String
#+BEGIN_SRC python :tangle src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test getName: UserReport --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_user_report_name(self):
        print "test_get_user_report_name"

        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()
        
        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        user_report_name = user_report.get_name()
        self.assertEqual(user_report_name, "College Report")

#+END_SRC
     
***** getUser: UserReport --> User
#+BEGIN_SRC python :tangle src/db.py :eval no 
    def get_user(self):
        return self.user
#+END_SRC
***** TestUser: UserReport --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_user_report_user(self):
        print "test_get_user_report_user"

        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        user = user_report.get_user()
        self.assertEqual("Coordinators Training", user.name )

#+END_SRC
***** setPath: UserReport, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no 
    @typecheck(path=str)
    def set_path(self, path):
        self.path = path
#+END_SRC

***** Test setPath: UserReport, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_user_report_path(self):
        print "test_set_user_report_path"

        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()
        
        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        user_report.set_path("/static/uploads/college-reports/file.doc")
        user_report.save()

        doc = user_report.get_by_id(1)
        self.assertEqual(doc.path, "/static/uploads/college-reports/file.doc")
#+END_SRC
      
***** setName: UserReport, String --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no 
    @typecheck(name=str)
    def set_name(self, name):
        self.name = name
#+END_SRC

***** Test setName: UserReport, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_user_report_name(self):
        print "test_set_user_report_name"
        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        user_report = UserReport(name="College Report", path="/static/uploads/college-reports/file.pdf", user=user)
        user_report.save()

        user_report.set_name("User Photos")
        user_report.save()

        doc = user_report.get_by_id(1)
        self.assertEqual(doc.name, "User Photos")
#+END_SRC
      
***** setUser: UserReport, User --> Void
#+BEGIN_SRC python :tangle src/db.py :eval no
    @typecheck(user=User)
    def set_user(self, user):
        self.user = user

#+END_SRC

***** Test setUser: UserReport, User --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_report_user(self):
        print "test_set_user_report_user"
        role = Role(name=Name("Student"))

        user1 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user1.save()
        user2 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user2.save()


        user_report = UserReport(name= "College Report", path="/static/uploads/college-reports/file.pdf", user=user1)
        user_report.save()
     
        user_report.set_user(user2)
        user_report.save()
        self.assertEqual(user_report.user.name, "madhavi")
#+END_SRC
***** to_client
#+BEGIN_SRC python :tangle src/db.py :eval no 
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'path': self.path,
            'user': self.user.to_client()
        }
#+END_SRC
      
***** Test UserReport to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_user_report_to_client(self):
        print "test_user_report_to_client"

        name = Name("Student")
        role = Role(name=name)
        role.save()
         
        user_report = UserReport(name= "College Report", path="/static/uploads/college-reports/file.pdf", user=user1)
        user_report.save()

        doc = user_report.get_by_id(1)
        doc_dict = doc.to_client()

        self.assertEqual("/static/uploads/college-reports/file.pdf", doc_dict['path'])
        self.assertEqual("College Reports", doc_dict['name'])

#+END_SRC

** Custom Exceptions
These are some of the custom exceptions used in the application.
*** AttributeRequired
#+BEGIN_SRC python :tangle src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

** Utility Functions
#+BEGIN_SRC python :tangle src/utils.py :eval no
# module to hold all utilities/helper functions

import json

from flask import make_response, current_app


# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')

    return make_response(json.dumps(data), 200,
                         {'content-type': 'application/json'})


# take in a flask request object and try to parse out a dictionary from the
# request
# try to find if request is as JSON first, then look into forms, finally force
# find it.
# If not found return a dict; else return the parsed data
def parse_request(request):
    if request.json:
        # print 'found in request.json'
        data = request.get_json()

    elif request.data:
        # print 'found in request.data'
        data = json.loads(request.data)

    elif request.form:
        # print 'found in request.form'
        data = request.form.to_dict()
        # try to detect if form contains integers and boolean data and attempt
        # to convert them
        # FIXME: is this a good idea? Fix this to do it in a better way?
        for k in data:
            if is_number(data[k]):
                data[k] = int(data[k])
            if is_bool_in_str(data[k]):
                data[k] = str_to_bool(data[k])

            # print k, data[k]

    else:
        data = request.get_json(force=True)

    if not data:
        return False

    return data


# check if a given string is a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


# check if in a given string python bool types are represented
def is_bool_in_str(s):
    if s == "True" or s == "False":
        return True
    return False


# convert python bool types in string to native bool types
def str_to_bool(s):
    if s == "True":
        return True
    if s == "False":
        return False
    return None


# decorator to do typechecking of arguments passed to functions
# usage: @typecheck(var1=<type>, var2=(<type1>, <type2>), ..)
#        def yourfunc(var1, var2, ..):
#           ....
def typecheck(**typemap):
    """
    Decorator to do typechecking of arguments passed to functions. Similar to
    function annotations in Python 3, but this also does strict type checking
    when a function is called.
    The type to an argument can be single or multiple types. Mutiple types are
    to be specified in a tuple.
    Usage:
        @typecheck(var1=<type>, var2=(<type1>, <type2>), ..)
        def yourfunc(var1, var2, ..):
            ....
    """
    # print "all valid types: %s" % typemap

    def make_wrapper(decorated_func):

        def wrapper(*arg_vals, **kw_vals):
            # TODO: have more comments to better describe each line
            arg_names = decorated_func.func_code.co_varnames
            # print arg_names
            # if not arg_vals:
            #     print kw_vals
            #     # arg_vals = kw_vals
            # print arg_vals

            # iterate over the typemap passed to the typecheck decorator and
            # compare with the actual arguments passed to the function
            for key, val in typemap.iteritems():
                arg_name = key
                idx = arg_names.index(arg_name)
                arg = arg_vals[idx]
                # print "arg_name: %s, arg: %s, typemap[arg_name]: %s" %\
                #    (arg_name, arg, typemap[arg_name])

                # if the passed type is a list throw an error
                if typemap[arg_name] is list:
                    raise SyntaxError("The types of %s has to be a tuple, "
                                      "not list. \n See usage of `typecheck`" %
                                      arg_name)

                # check if the passed type is a tuple, if not make it
                if typemap[arg_name] is not tuple:
                    types = (typemap[arg_name],)
                else:
                    types = typemap[arg_name]

                # iterate over the `types` tuple to see the arg matches any of
                # the type provided in the tuple
                if True not in map(lambda type: isinstance(arg, type), types):
                    # print "types are not fine"
                    raise TypeError("For %s type should have been %s. But "
                                    "provided: %s" % (arg_name,
                                                      typemap[arg_name],
                                                      type(arg)))

            return decorated_func(*arg_vals, **kw_vals)
        return wrapper

    return make_wrapper

#+END_SRC

** The web application
#+BEGIN_SRC python :tangle src/app.py :eval no
# -*- coding: utf-8 -*-
import os

from flask import Flask, jsonify, make_response
# from flask.ext.cors import CORS

from db import db, mail
from api import api
# import config file
import config


def create_app(config):
    # init our app
    app = Flask(__name__)
    app.secret_key = 'djfjsdkjXXS7979dfdfd'
    # load config values from the config file
    app.config.from_object(config)

    # init sqlalchemy db instance
    db.init_app(app)

    # init mail instance    
    mail.init_app(app)

    db.app = app
    db.mail = mail    

    # register blueprints
    app.register_blueprint(api)
 #   configure_logging(app)
    configure_errorhandlers(app)
    #  configure_cors(app)
    # all set; return app object
    return app


# custom error handlers to return JSON errors with appropiate status codes
def configure_errorhandlers(app):

    @app.errorhandler(500)
    def server_error(err):
        app.logger.error("error code = %s" % "500")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 500)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 500)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 500)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(405)
    def method_not_allowed(err):
        app.logger.error("error code = %s" % "405")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 405)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 405)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 405)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(404)
    def not_found(err):
        app.logger.error("error code = %s" % "404")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 404)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 404)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 404)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(400)
    def bad_request(err):
        app.logger.error("error code = %s" % "400")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 400)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 400)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 400)
                app.logger.error("error = %s" % str(err))
        return resp


def configure_logging(app):
    import logging
    import logging.handlers
    formatter = logging.Formatter('%(asctime)s: %(levelname)s: %(filename)s:'
                                  ' %(funcName)s():%(lineno)d: %(message)s')

    # Also error can be sent out via email. So we can also have a SMTPHandler?
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           '..',
                           app.config['LOG_FILE_DIRECTORY'])

    log_file = "%s/%s" % (log_dir, app.config['LOG_FILE'])
    os.system("sudo touch %s" % log_file)
    os.system("sudo chmod 777 %s" % log_file)
    max_size = 1024 * 1024 * 20  # Max Size for a log file: 20MB
    log_handler = logging.handlers.RotatingFileHandler(log_file,
                                                       maxBytes=max_size,
                                                       backupCount=10)

    log_level = app.config['LOG_LEVEL']
    log_handler.setLevel(log_level)
    log_handler.setFormatter(formatter)

    app.logger.addHandler(log_handler)


if __name__ == "__main__":
    app = create_app(config)
    app.run(debug=True, host='0.0.0.0', threaded=True)

#+END_SRC

** Configuring the application
Below is the configuration for the application
#+BEGIN_SRC python :tangle src/config.py :eval no
# DB URI
# example DB URI:
# mysql+oursql://scott:tiger@localhost/mydatabase
# postgresql+psycopg2://scott:tiger@localhost/mydatabase
#SQLALCHEMY_DATABASE_URI = 'mysql+oursql://<userid>:<password>@<servername>/<db_name>'
# example
SQLALCHEMY_DATABASE_URI = 'mysql+oursql://root:root@localhost/talent'

# Debug from SQLAlchemy
# Turn this to False on production
SQLALCHEMY_ECHO = True
SQLALCHEMY_TRACK_MODIFICATIONS = True

# List of allowed origins for CORS
ALLOWED_ORIGINS = "['*']"

# List of allowed IPs
WHITELIST_IPS = ["127.0.0.1"]

# Configure your log paths
LOG_FILE_DIRECTORY = 'logs'
LOG_FILE = 'outreach.log'

# Log level for the application
LOG_LEVEL = 'DEBUG'

# destination for uploaded files
# example value - '/static/uploads/'
UPLOAD_DIR_PATH = '/static/uploads/'

# allowed file extensions that can be uploaded
ALLOWED_FILE_EXTENSIONS = ['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'csv' , 'doc' , 'docx']

# APP_URL
APP_URL = "http://localhost:5000"

# Persona Verifier URL
PERSONA_VERIFIER_URL = "https://verifier.login.persona.org/verify"

#+END_SRC

** Deploying the application
   For deploying the application, we use WSGI standard for Python
   applications.
   For that we need to write a WSGI script as follows.
#+BEGIN_SRC python :tangle outreach.wsgi :eval no
import sys, os

BASE_DIR = BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, BASE_DIR)

from src.app import create_app
from src import config

application = create_app(config)

#+END_SRC
   
** REST APIs to read and query data
   These are the set of REST APIs for read operations.

*** Design
   The REST APIs to get and query data are designed in a generic
   way. That is, APIs for each entity is not designed and implemented
   specifically, rather three generic API patterns are designed which,
   presumably, will capture all kinds of query patterns.

   *NOTE*: Please refer to the API's section of this document. 
   #+BEGIN_SRC python
  entity_map = {
      'roles': Role,
      'users': User,
      'colleges': College,
      'groups': Group,
      'user_reports':UserReport
    }
#+END_SRC
   
*** Implementation
**** Attributes of an entity and their relationship
     All the attributes of an entity and the relationship between the entity
     and the attribute is captured to facilitate run time creation of queries.

#+BEGIN_SRC python :tangle src/maps.py :eval no
from db import *
role = {'entity_class': Role,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'users',
             'class': User,
             'relationship': 'many'}
            ]}

user = {'entity_class': User,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'email',
             'class': None,
             'relationship': 'one'},
            {'name': 'password',
             'class': None,
             'relationship': 'one'},
            {'name': 'mobile_number',
             'class': None,
             'relationship': 'one'},
            {'name': 'date_of_birth',
             'class': None,
             'relationship': 'one'},
            {'name': 'address',
             'class': None,
             'relationship': 'one'},
            {'name': 'city',
             'class': None,
             'relationship': 'one'},
            {'name': 'country',
             'class': None,
             'relationship': 'one'},
            {'name': 'zip_code',
             'class': None,
             'relationship': 'one'},
            {'name': 'role',
             'class': Role,
             'relationship': 'many'}
        ]}
college = {'entity_class': College,
           'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'address',
             'class': None,
             'relationship': 'one'},
            {'name': 'created_by',
             'class': User,
             'relationship': 'many'}
            ]}
group = {'entity_class': Group,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'college',
             'class': College,
             'relationship': 'many'},
            {'name': 'created_by',
             'class': User,
             'relationship': 'many'}

            ]}

user_report = {'entity_class': UserReport,
                  'attributes': [
                      {'name': 'id',
                       'class': None,
                       'relationship': 'one'},
                      {'name': 'path',
                       'class': None,
                       'relationship': 'one'},
                      {'name': 'user',
                       'class': User,
                       'relationship': 'one'}
                  ]}



roles = role
users = user
colleges = college
groups = group
user_reports=user_report

entity_pairs = {
    'roles': role,
    'users': user,
    'colleges':college,
    'groups': group,
    'user_reports':user_report
}
                   
#+END_SRC
     
**** GET APIS
#+BEGIN_SRC python :tangle src/api.py :eval no
@api.route("/send_email")
def index():
   msg = Message('Hello', sender = 'madhavipuliraju@gmail.com', recipients = ['madhavi@vlabs.ac.in', 'sripathi@vlabs.ac.in', 'kammari.sripathi@gmail.com'])
   msg.body = "Hello Flask message attatchment sent from Flask-Mail"
   with api.open_resource("/home/ambika/Desktop/red.jpg") as fp:
       msg.attach("/home/ambika/Desktop/red.jpg", "image/jpg", fp.read())

   mail.send(msg)
   return "Sent"

@api.route('/upload_user_files/<id>', methods=['GET', 'POST'])
def save_user_files(id):
    if request.method == 'GET':
        return '''
        <!doctype html>
        <title>Upload User files</title>
        <h1>Upload User files</h1>
        <form action="" method=post enctype=multipart/form-data>
        <p><input type=file name=file>
        <input type=submit value=Upload>
        </form>
        '''
    if request.method == 'POST':
        url = APP_URL + "/upload_user_files/"\
              + id
        response = requests.get(url)

        file = request.files['file']
        if response.ok:
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                outreach_directory_path = os.path.dirname(os.path.abspath(__file__))
                dir_path = outreach_directory_path + UPLOAD_DIR_PATH
                timestamp = datetime.utcnow().strftime("-%Y-%m-%d-%H-%M-%S.")
                file_name = filename.split(".")
                new_file_name = "%s%s%s" % (file_name[0], timestamp, file_name[1])    
                file_path = "%s%s" % (dir_path, new_file_name)
                db_path = "%s%s" % (UPLOAD_DIR_PATH, new_file_name)
                file.save(file_path)

                path = {'path': db_path}
                response = requests.put(url, data=path)
                return file_path
            else:
                return "file format is not in Allowed Extensions"
        else:
            return "No entry for 'Upload Files' entity with given id"


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in set(ALLOWED_FILE_EXTENSIONS)
# query an entity
# =/<:entity>s?query_param1=val1&query_param2=val2&..query_paramn=valn=
@api.route('/<entity>', methods=['GET'])
def query_an_entity(entity):
    if entity not in entity_pairs:
        abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_pairs[entity]['entity_class']
    arg_tuple_list = request.args.lists()
    if not arg_tuple_list:
        print "data: %s" % [i.to_client() for i in curr_entity.get_all()]
        return jsonify_list([i.to_client() for i in curr_entity.get_all()])
    else:
        query = curr_entity.query
        filters = []
        for arg_tuple in arg_tuple_list:
            args = arg_tuple[0].split('.')
            values = arg_tuple[1][0].split(',')
            filters.append(create_filters(entity_pairs[entity], \
                                          curr_entity, args, values))
        for filter in filters:
            query = query.filter(filter)
        entities = query.all()
        print "data: %s" % [ent.to_client() for ent in entities]
        return jsonify_list([ent.to_client() for ent in entities])


def create_filters(entity_map, curr_entity, args, values):
    if len(args) == 1:
        try:
            return getattr(curr_entity, args[0]).in_(values)
        except Exception, e:
            abort(400, 'error is %s' % (str(e)))
    else:
        result = filter(lambda item: item['name'] == args[0],
                        entity_map['attributes'])
        if not result:
            abort(400, '%s is not attribute of %s' %
                  (args[0], str(entity_map['entity_class'])))

        entity_map = args[0]
        if result[0]['relationship'] == 'one':
            try:
                return getattr(curr_entity, args[0]).has(
                    create_filters(entity_map, result[0]['class'], \
                                   args[1:], values))
            except Exception, e:
                abort(400, 'error is %s' % (str(e)))
        else:
            try:
                return getattr(curr_entity, args[0]).any(
                    create_filters(entity_map, result[0]['class'], \
                                   args[1:], values))
            except Exception, e:
                abort(400, 'error is %s' % (str(e)))


@api.route('/<entity>/<id>', methods=['GET'])
def get_specific_entity(entity, id):
    if entity not in entity_pairs:
        abort(400, 'Entity %s is not valid.' % entity)
    curr_entity = entity_pairs[entity]['entity_class']
    record = curr_entity.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % (entity, id))

    return jsonify(record.to_client())

#+END_SRC

** REST API to create/update/delete data
*** Implementation
**** The entity look up table with corresponding types of their attributes
#+NAME: entity-map-types
#+BEGIN_SRC python
entity_map_types = {
    'roles': {
        'entity': Role,
        'types': {
            'name': Name
        }
    },
    'users': {
        'entity': User,
        'types': {
            'name': Name,
            'email': Email,
            'password': str,
            'role': Role,
            'mobile_number': int,
            'date_of_birth': str,
            'address': str,
            'city': str,
            'country': str,
            'zip_code': int
        }
    },
    'colleges': {
        'entity': College,
        'types': {
            'name': Name,
            'address': str,
            'created_by': User,
        }
    },
    'groups': {
        'entity': Group,
        'types': {
            'name': Name,
            'college': College,
            'created_by': User,
        }
    },
    'user_reports': {
        'entity': UserReport,
        'types': {
            'name':str,
            'path': str,
            'user': User
        }
    }


}

#+END_SRC

**** The API to update/delete entries
***** API route definition
The API route definitions. Defining the =/entity/id= API for update and delete
operations. The following API handler first checks if the requested URL is a
valid entity. If not it sends back a HTTP 400. If it is a valid entity, then
it looks at the HTTP method, and calls the appropriate function to actually
delete or update an existing record.
#+NAME: modify-entity
#+BEGIN_SRC python
@api.route('/<entity>/<id>', methods=['PUT', 'DELETE'])
def modify_entity(entity, id):
    if entity not in entity_map_types:
        abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_map_types[entity]['entity']

    if request.method == 'DELETE':
        status = delete_record(curr_entity, id)
        return status

    if request.method == 'PUT':
        status = update_record(entity, curr_entity, id)
        return status
    
#+END_SRC

***** Delete Record function
The function to delete a record given an entity and a id. On success, it
returns the =id= and a ~status=success~ as a JSON. If no such record with the
given =id= is found, it return a HTTP 404 not found error. If the record is
found, but there was error deleting the record, it sends back a HTTP 500 with
corresponding error.
#+NAME: delete-record
#+BEGIN_SRC python
def delete_record(entity, id):
    record = entity.get_by_id(id)
    if not record:
        abort(404, 'No %s with id %s' % (entity, id))
    else:
        record.delete()
          

    return jsonify(id=id, status="success")

#+END_SRC

***** Update Record function
The function to update an record given the entity name, the actual entity,
=id= of the record and the request object which has the data to be updated.
Following steps:
1. Check if the record with given =id= exist.
   1. If record doesn't exist, send back a HTTP 404 error.
2. If record exist, parse the request data into a =dict=, if the =dict= is
   empty or malformed send back a HTTP 400 error.
3. Now the request =dict= contains the request data, but they are all in
   strings. To handover the data to actually operate on to update, the data
   has to be converted to correct types, looking at the lookup table which has
   the type information. This type conversion is handled by the function
   =typecast_data=.
4. Once, the data is type converted, it calls the =update= method on the
   record.
5. If the =update= is not successful, it will send back a HTTP 500 with
   corresponding error.
6. If success, it will send back a JSON with the updated record.
#+NAME: update-record
#+BEGIN_SRC python
def update_record(entity_name, entity, id):
    record = entity.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (entity_name, id))

    data = parse_request(request)
    if not data or type(data) is not dict:
        abort(400, "The data should be in JSON format")

    data = typecast_data(entity_name, data)
    print "typecasted data: %s" % data

    try:
        print "Updating record: %s with data: %s" % (record, data)
        record.update(**data)
    except Exception, e:
        print e
        abort(500, str(e))

    return jsonify(record.to_client())

#+END_SRC

****** Typecast Data function
The method to typecast the data. It takes in an entity, and the data in a
=dict= format; and returns another =dict= with all the values having correct
types, based on the passed entity (this information is stored in the lookup
table with entity, its attributes and their type information). The following
functions just takes each item in the data =dict=, finds out its corresponding
constructor from the type information and calls the =typecast_item= function
over it.
#+NAME: typecast-data
#+BEGIN_SRC python
def typecast_data(entity, data):
    updated_data = {}
    for attr, val in data.iteritems():
        print "attr: %s, val: %s" % (attr, val)
        if attr not in entity_map_types[entity]['types']:
            abort(400, '%s attribute not in %s' % (attr, entity))
        const = entity_map_types[entity]['types'][attr]
        print "const for %s is %s" % (attr, const)

        if type(val) is list:
            new_val = map(lambda item: typecast_item(const, attr, item), val)
        else:
            new_val = typecast_item(const, attr, val)

        updated_data[attr] = new_val

    return updated_data

#+END_SRC

The function takes in a constructor, the attribute name and the actual
attribute value, and returns the new value typecasted to its correct type.
If the attribute is a compound item (like that itself is a =dict=), then it
calls the =typecast_compound_item= function. Else if it is a simple attribute
it just calls the constructor over the value. If the constructor throws an
error, the function returns a HTTP 400 error.
#+NAME: typecast-item
#+BEGIN_SRC python
# take a constructor, and attr name and the actual attribute and convert the
# attribute value to its actual type
def typecast_item(const, attr, val):
    if type(val) is dict:
        new_val = typecast_compound_item(const, attr, val)
        return new_val

    try:
        new_val = const(val)
    except TypeError:
        abort(400, '%s is not a valid %s' % (val, attr))

    print "new val after const: %s" % new_val
    return new_val

#+END_SRC

The function takes in a constructor, the attribute name and the actual
attribute value, and returns the new value typecasted to its correct type.
Here the assumption is, that the value that it has been passed is of type
=dict=, and the =dict= contains an =id= field, which means this value is an
existing record. Hence, this function calls the =get_by_id= method of the
constructor (or the type). If there is an error it sends back appropriate HTTP
error codes.
#+NAME: typecast-compound-item
#+BEGIN_SRC python
# take a constructor, and attr name and the actual attribute and convert the
# attribute value to its actual type
def typecast_compound_item(const, attr, val):
    if 'id' not in val:
        abort(400, "id attr has to be present in %s:%s" % (attr,
                                                           val))
    try:
        new_val = const.get_by_id(val['id'])
    except TypeError:
        abort(400, '%s is not a valid %s' % (val, attr))

    if not new_val:
        abort(404, 'id %s of %s is not found' % (val['id'], attr))
    print "new val after const: %s" % new_val
    return new_val

#+END_SRC

***** Code tangle
In the below, all the above code blocks are arranged in the order the python
interpreter expects them to be.
#+BEGIN_SRC python :tangle src/api.py :eval no :noweb yes
<<entity-map-types>>

<<delete-record>>

<<typecast-compound-item>>

<<typecast-item>>

<<typecast-data>>

<<update-record>>

<<modify-entity>>
#+END_SRC

**** The API to create new entries
***** API route definition
#+NAME: create-entity
#+BEGIN_SRC python
@api.route('/<entity>', methods=['POST'])
def create_entity(entity):
    if entity not in entity_map_types:
        abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_map_types[entity]['entity']

    status = create_record(entity, curr_entity)
    return status

#+END_SRC
***** Create Record function
#+NAME: create-record
#+BEGIN_SRC python
def create_record(entity_name, entity):

    data = parse_request(request)
    if not data or type(data) is not dict:
        abort(400, "The data should be in JSON format")

    data = typecast_data(entity_name, data)
    print "creating new, typecasted data: %s" % data

    try:
        print "Creating record: %s with data: %s" % (entity_name, data)
        new_record = entity(**data)
        new_record.save()
    except Exception, e:
        print e
        abort(500, str(e))

    return jsonify(new_record.to_client())

#+END_SRC

***** Code tangle
#+BEGIN_SRC python :tangle src/api.py :eval no :noweb yes
<<create-record>>
<<create-entity>>
#+END_SRC
      
** Testing the REST API
*** Tests for Role
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestRole(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(confg)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_roles(self):
        print "test_get_all_roles"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("OC"))
        role2.save()
        r = self.client.get('/roles')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

    def test_get_one_role(self):
        print "test_get_one_role"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("OC"))
        role2.save()
        r = self.client.get('/roles/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Admin")

    def test_update_existing_role(self):
        print "test_update_existing_role"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("OC"))
        role2.save()
        r = self.client.put('/roles/1',
                            data=json.dumps({'name': 'NC'}))
        result = json.loads(r.data)
        print "result"
        print result
        self.assertEqual(result['name'], "NC")

    def test_create_new_role(self):
        print "test_create_new_role"
        r = self.client.post('/roles',
                             data=json.dumps({'name': 'Outreach Coordinator'}))
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Outreach Coordinator")

    def test_delete_role(self):
        print "test_delete_role"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("NC"))
        role2.save()
        r = self.client.delete('/roles/1')
        r = self.client.get('/roles')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for User
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestUser(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_users(self):
        print "test_get_all_users"
        role = Role(name=Name("Admin"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        r = self.client.get('/users')
        result = json.loads(r.data)
        print result
        self.assertEquals(len(result), 2)

    def test_get_one_user(self):
        print "test_get_one_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        r = self.client.get('/users/1')
        result = json.loads(r.data)
        print result
        self.assertEqual(result['name'], "Joe Smith")

    def test_update_existing_user(self):
        print "test_update_existing_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        r = self.client.put('/users/1',
                            data=json.dumps({'email': 'joe@mit.edu'}))
        result = json.loads(r.data)
        self.assertEqual(result['email'], "joe@mit.edu")

    def test_create_new_user(self):
        print "test_create_new_user"
        role = Role(name=Name("OC"))
        role.save()
        r = self.client.post('/users',
                             data=json.dumps({'name': 'Joe Smith',
                                              'email': 'joe@mit.edu',
                                              'role': role.to_client()}))
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Joe Smith")

    def test_delete_user(self):
        print "test_delete_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        r = self.client.delete('/users/1')
        r = self.client.get('/users')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for User Report
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestUserReport(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_user_reports(self):
        print "test_get_all_user_reports"

        role = Role(name=Name("Student"))
        role.save()

        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()


        user_report1 = UserReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          user=user_1)
        user_report1.save()

        user_report2 = UserReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          user=user_2)
        user_report2.save()


        r = self.client.get('/user_reports')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

    def test_get_one_user_report(self):
        print "test_get_one_user_report"

        role = Role(name=Name("Student"))
        role.save()

        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()


        user_report1 = UserReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          user=user_1)
        user_report1.save()


        r = self.client.get('/user_reports/1')
        result = json.loads(r.data)
        print result
        self.assertEqual(result['name'], "College Report")

    def test_update_existing_user_report(self):
        print "test_update_existing_user_report"

        role = Role(name=Name("Student"))
        role.save()

        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        user_report1 = UserReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          user=user_1)
        user_report1.save()

        r = self.client.put('/user_reports/1',
                            data=json.dumps({'name': 'User Photos'}))

        result = json.loads(r.data)

        self.assertEqual(result['name'], "User Photos")

    def test_create_new_user_report(self):
        print "test_create_new_user_report"

        role = Role(name=Name("Student"))
        role.save()

        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user.save()

        
        r = self.client.post('/user_reports',
                             data=json.dumps({ 'name' : 'College Report',
                                               'path' : '/static/uploads/college-reports/file.pdf', 
                                               'user': user.to_client()
                                           }))
        result = json.loads(r.data)
        self.assertEqual(result['name'], "College Report")

    def test_delete_user_report(self):
        print "test_delete_user_report"
        user_1 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"),
                    password=("madhavi"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user_1.save()

        user_2 = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"),
                    password=("ambika"), mobile_number=("9866188505"), date_of_birth=("06/02/1991"),
                    address=("1-3-176/D"), city=("Hyd"), country=("India"), zip_code=("500080"), role = role)
        user_2.save()


        user_report1 = UserReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          user=user_1)
        user_report1.save()

        user_report2 = UserReport(name="User Photos",
                                          path="/static/uploads/user-photos/photo.png",
                                          user=user_2)
        user_report2.save()
        
        r = self.client.delete('/user_reports/1')
        r = self.client.get('/user_reports')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
* Run the Test Cases
** Python DB Tests
#+BEGIN_SRC python :tangle tests/test_db.py :eval no

if __name__ == '__main__':
    unittest.main()

#+END_SRC

** Python REST API Tests
#+BEGIN_SRC python :tangle tests/test_api.py :eval no

if __name__ == '__main__':
    unittest.main()

#+END_SRC
* API's
  [[./api_doc.org][API Documentation]]
